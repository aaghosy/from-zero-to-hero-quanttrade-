from bigmodule import M

# <aistudiograph>

# @param(id="m2", name="initialize")
# 交易引擎：初始化函数，只执行一次
def m2_initialize_bigquant_run(context):
    from bigtrader.finance.commission import PerOrder

    # 系统已经设置了默认的交易手续费和滑点，要修改手续费可使用如下函数
    context.set_commission(PerOrder(buy_cost=0.0003, sell_cost=0.0013, min_cost=5))

# @param(id="m2", name="before_trading_start")
# 交易引擎：每个单位时间开盘前调用一次。
def m2_before_trading_start_bigquant_run(context, data):
    # 盘前处理，订阅行情等
    pass

# @param(id="m2", name="handle_tick")
# 交易引擎：tick数据处理函数，每个tick执行一次
def m2_handle_tick_bigquant_run(context, tick):
    pass

# @param(id="m2", name="handle_data")
# 回测引擎：每日数据处理函数, 每天执行一次
def m2_handle_data_bigquant_run(context, data):
    import pandas as pd

    # 下一个交易日不是调仓日，则不生成信号
    if not context.rebalance_period.is_signal_date(data.current_dt.date()):
        return

    # 从传入的数据 context.data 中读取今天的信号数据
    today_df = context.data[context.data["date"] == data.current_dt.strftime("%Y-%m-%d")]

    # 卖出不在目标持有列表中的股票
    for instrument in sorted(set(context.get_account_positions().keys()) - set(today_df["instrument"])):
        context.order_target_percent(instrument, 0)
    # 目前持仓
    stock_now = {e: p for e, p in context.portfolio.positions.items() if p.amount>0}
    # 买入目标持有列表中的股票
    for i, x in today_df.iterrows():
        if x.instrument in stock_now:
            continue
        context.order_target_percent(x.instrument, 0.0 if pd.isnull(x.position) else x.position)
# @param(id="m2", name="handle_trade")
# 交易引擎：成交回报处理函数，每个成交发生时执行一次
def m2_handle_trade_bigquant_run(context, trade):
    pass

# @param(id="m2", name="handle_order")
# 交易引擎：委托回报处理函数，每个委托变化时执行一次
def m2_handle_order_bigquant_run(context, order):
    pass

# @param(id="m2", name="after_trading")
# 交易引擎：盘后处理函数，每日盘后执行一次
def m2_after_trading_bigquant_run(context, data):
    pass

# @module(position="-429,-1205", comment="""""", comment_collapsed=True)
m5 = M.input_features_dai.v26(
    mode="""表达式""",
    expr="""score""",
    expr_filters="""""",
    expr_tables="""user_data_bq3xsdcp_7a60b646""",
    extra_fields="""date, instrument""",
    order_by="""date, instrument""",
    expr_drop_na=True,
    expr_add_sql=False,
    sql="""""",
    extract_data=False,
    m_cached=False,
    m_name="""m5"""
)

# @module(position="-428,-1103", comment="""""", comment_collapsed=True)
m6 = M.extract_data_dai.v16(
    sql=m5.data,
    start_date="""2022-07-26""",
    start_date_bound_to_trading_date=True,
    end_date="""2024-04-11""",
    end_date_bound_to_trading_date=True,
    before_start_days=90,
    debug=False,
    m_name="""m6"""
)

# @module(position="-422,-1025", comment="""计算仓位分配，把仓目标作为输入给 BigTrader""", comment_collapsed=True)
m1 = M.score_to_position.v2(
    input_1=m6.data,
    score_field="""score DESC""",
    hold_count=5,
    position_expr="""-- DAI SQL 算子/函数: https://bigquant.com/wiki/doc/dai-PLSbc1SbZX#h-%E5%87%BD%E6%95%B0
-- 在这里输入表达式, 每行一个表达式, 输出仓位字段必须命名为 position, 模块会进一步做归一化
-- 排序倒数: 1 / score_rank AS position AS position
-- 对数下降: 1 / log2(score_rank + 1) AS position
-- 等权重分配 1 AS position

1 AS position""",
    total_position=1,
    extract_data=True,
    m_name="""m1"""
)

# @module(position="-452,-941", comment="""交易，日线，设置初始化函数和K线处理函数，以及初始资金、基准等""", comment_collapsed=True)
m2 = M.bigtrader.v17(
    data=m1.data,
    start_date="""""",
    end_date="""""",
    initialize=m2_initialize_bigquant_run,
    before_trading_start=m2_before_trading_start_bigquant_run,
    handle_tick=m2_handle_tick_bigquant_run,
    handle_data=m2_handle_data_bigquant_run,
    handle_trade=m2_handle_trade_bigquant_run,
    handle_order=m2_handle_order_bigquant_run,
    after_trading=m2_after_trading_bigquant_run,
    capital_base=500000,
    frequency="""daily""",
    product_type="""股票""",
    rebalance_period_type="""交易日""",
    rebalance_period_days="""1""",
    rebalance_period_roll_forward=True,
    backtest_engine_mode="""标准模式""",
    before_start_days=0,
    volume_limit=1,
    order_price_field_buy="""open""",
    order_price_field_sell="""open""",
    benchmark="""沪深300指数""",
    plot_charts=True,
    debug=False,
    backtest_only=False,
    m_name="""m2"""
)
# </aistudiograph>
