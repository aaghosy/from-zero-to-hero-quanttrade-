from bigmodule import M

# <aistudiograph>

# @param(id="m33", name="initialize")
# 交易引擎：初始化函数，只执行一次
def m33_initialize_bigquant_run(context):
    # 加载预测数据
    from bigtrader.finance.commission import PerOrder
    context.ins = '518880.SH'
    # 系统已经设置了默认的交易手续费和滑点，要修改手续费可使用如下函数
    context.set_commission(PerOrder(buy_cost=0.0001, sell_cost=0.0001, min_cost=5))

# @param(id="m33", name="before_trading_start")
# 交易引擎：每个单位时间开盘前调用一次。
def m33_before_trading_start_bigquant_run(context, data):
    # 盘前处理，订阅行情等
    pass

# @param(id="m33", name="handle_tick")
# 交易引擎：tick数据处理函数，每个tick执行一次
def m33_handle_tick_bigquant_run(context, tick):
    pass

# @param(id="m33", name="handle_data")
def m33_handle_data_bigquant_run(context, data):
    # 下一个交易日不是调仓日，则不生成信号
    if not context.rebalance_period.is_signal_date(data.current_dt.date()):
        return

    # 从传入的数据 context.data 中读取今天的信号数据
    today_signal = context.data[context.data["date"] == data.current_dt.strftime("%Y-%m-%d")]

    # target_instruments = today_signal["instrument"].tolist()
    
    if today_signal['buy_signal'].iloc[0]:
        context.order_target_percent(context.ins, 1)
        
    elif today_signal['sell_signal'].iloc[0]:
        if context.get_position(context.ins).avail_qty > 0:
            context.order_target_percent(context.ins, 0)

# @param(id="m33", name="handle_trade")
# 交易引擎：成交回报处理函数，每个成交发生时执行一次
def m33_handle_trade_bigquant_run(context, trade):
    pass

# @param(id="m33", name="handle_order")
# 交易引擎：委托回报处理函数，每个委托变化时执行一次
def m33_handle_order_bigquant_run(context, order):
    pass

# @param(id="m33", name="after_trading")
# 交易引擎：盘后处理函数，每日盘后执行一次
def m33_after_trading_bigquant_run(context, data):
    pass

# @module(position="-308,42", comment="""""", comment_collapsed=True)
m11 = M.input_features_dai.v30(
    mode="""表达式""",
    expr="""-- DAI SQL 算子/函数: https://bigquant.com/wiki/doc/dai-PLSbc1SbZX#h-%E5%87%BD%E6%95%B0
-- 数据&字段: 数据文档 https://bigquant.com/data/home
-- 数据使用: 表名.字段名, 对于没有指定表名的列, 会从 expr_tables 推断, 如果同名字段在多个表中出现, 需要显式的给出表名

buy_signal
sell_signal
-- cn_stock_bar1d.close / cn_stock_bar1d.open
-- cn_stock_prefactors https://bigquant.com/data/datasources/cn_stock_prefactors 是常用因子表(VIEW), JOIN了很多数据表, 性能会比直接用相关表慢一点, 但使用简单
-- cn_stock_prefactors.pe_ttm

-- 表达式模式下, 会自动join输入数据1/2/3, 可以在表达式里直接使用其字段。包括 input_1 的所有列但去掉 date, instrument。注意字段不能有重复的, 否则会报错
-- input_1.* EXCLUDE(date, instrument)
-- input_1.close
-- input_2.close / input_1.close
""",
    expr_tables="""gold_base_on_macd_boll""",
    extra_fields="""date, instrument""",
    order_by="""date, instrument""",
    expr_drop_na=True,
    extract_data=False,
    m_name="""m11"""
)

# @module(position="-306,127", comment="""""", comment_collapsed=True)
m22 = M.extract_data_dai.v17(
    sql=m11.data,
    start_date="""2023-12-25""",
    start_date_bound_to_trading_date=False,
    end_date="""2025-04-22""",
    end_date_bound_to_trading_date=True,
    before_start_days=90,
    debug=False,
    m_cached=False,
    m_name="""m22"""
)

# @module(position="-312,223", comment="""""", comment_collapsed=True)
m33 = M.bigtrader.v34(
    data=m22.data,
    start_date="""""",
    end_date="""""",
    initialize=m33_initialize_bigquant_run,
    before_trading_start=m33_before_trading_start_bigquant_run,
    handle_tick=m33_handle_tick_bigquant_run,
    handle_data=m33_handle_data_bigquant_run,
    handle_trade=m33_handle_trade_bigquant_run,
    handle_order=m33_handle_order_bigquant_run,
    after_trading=m33_after_trading_bigquant_run,
    capital_base=100000,
    frequency="""daily""",
    product_type="""基金""",
    rebalance_period_type="""交易日""",
    rebalance_period_days="""5""",
    rebalance_period_roll_forward=True,
    backtest_engine_mode="""标准模式""",
    before_start_days=0,
    volume_limit=0,
    order_price_field_buy="""open""",
    order_price_field_sell="""open""",
    benchmark="""沪深300指数""",
    plot_charts=True,
    debug=False,
    backtest_only=False,
    m_cached=False,
    m_name="""m33"""
)
# </aistudiograph>


